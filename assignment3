#include <stdio.h>
#include <stdbool.h>
#include <math.h>
#include <stdlib.h>

//insures that the given input for a number is valid
/*
bool valid(char in[]){//recieves input as a char array
  int dec=0, minus=0, c=0;//counters for # of decimals, minus signs, and any other non number char
  for(int i=0;i<sizeof(in);i++){//goes through input to check each char
    if(!(in[i]>='0' && in[i]<='9')){
      if(in[i]=='.'){
        dec++;
      }
      else if(in[i]=='-'){
        minus++;
      }
      else{
        c++;
      }
    }
  }
  for(int i=0;i<sizeof(in);i++){
    printf("%c",in[i]);
  }
  if(dec>1 || minus>1 ||(minus==1 && in[0]!='-') || c>0){//returns false if input has more than one decimal, more than one minus or a minus in the wrong place, or if there is a non number char
    return false;
  }
  else{
    return true;
  }
}
*/
//handles binary operations
float binary(float x,float y,char op){
  switch(op){
    case '+':
      printf("%f",x+y);//prints the sum of the numbers
      return x+y;
      break;
    case '-':
      printf("%f\n",x-y);//prints the difference of the numbers
      return x-y;
      break;
    case '*':
      printf("%f\n",x*y);//prints the product of the numbers
      return x*y;
      break;
    case '/':
      if(y!=0){
        printf("%f\n",x/y);//prints the quotient of the numbers
        return x/y;
      }
      else{
        puts("Invalid operation");
      }
      break;
    case '%':
      printf("%f\n",remainder(x,y));//prints the remainder of the numbers
      return remainder(x,y);
      break;
    case 'P':
    case 'p':
      printf("%f\n",pow(x,y));//prints first number to the power of the second
      return pow(x,y);
      break;
    case 'X':
    case 'x':
      if(x>=y){
        printf("%f\n",x);
        return x;
      }
      else{
        printf("%f\n",y);
        return y;
      }//prints greater one of the numbers
      break;
    case 'I':
    case 'i':
      if(x<=y){
        printf("%f\n",x);
      }
      else{
        printf("%f\n",y);
      }//prints lesser one of the numbers
      break;
    default:
      puts("Invalid input.");
  }
}
//handles binary operations with variables
void vb(float x,float y){
  char op;
      
      puts("Enter an operation (+,-,*,/,%,P,X,I)");
      scanf(" %c",&op);
      
      //read the numbers and operator for binary operations
      switch(op){
        case '+':
          printf("%f\n",x+y);//prints the sum of the numbers
          break;
        case '-':
          printf("%f\n",x-y);//prints the difference of the numbers
          break;
        case '*':
          printf("%f\n",x*y);//prints the product of the numbers
          break;
        case '/':
          if(y!=0){
            printf("%f\n",x/y);//prints the quotient of the numbers
          }
          break;
        case '%':
          printf("%f\n",remainder(x,y));//prints the remainder of the numbers
          break;
        case 'P':
        case 'p':
          printf("%f\n",pow(x,y));
          break;
        case 'X':
        case 'x':
          if(x>=y){
            printf("%f\n",x);
          }
          else{
            printf("%f\n",y);
          }
          break;
        case 'I':
        case 'i':
          if(x<=y){
            printf("%f\n",x);
          }
          else{
            printf("%f\n",y);
          }
          break;
        default:
          puts("Invalid input.");
      }
}
//handles unary operations
void unary(float x, char op){
  switch(op){
    case 'S':
    case 's':
      printf("%f\n",sqrt(x));//prints square root of number
      break;
    case 'L':
    case 'l':
      if(x!=0){
        printf("%f\n",log(x));//prints logarithm of number to the base of e
      }
      else{
        puts("Invalid operation");
      }
      break;
    case 'E':
    case 'e':
      printf("%f\n",exp(x));//prints e to the power of the number
      break;
    case 'C':
    case 'c':
      printf("%f\n",ceil(x));//prints the number's ceiling
      break;
    case 'F':
    case 'f':
      printf("%f\n",floor(x));//prints the number's floor
      break;
    default:
      puts("Invalid input.");
    }
}
//handles unary operations with variables
void vu(float x){
  char op;
      puts("Enter an operation (S,L,E,C,F)");
      scanf(" %c",&op);

      switch(op){
        case 'S':
        case 's':
          printf("%f\n",sqrt(x));
          break;
        case 'L':
        case 'l':
          if(x!=0){
            printf("%f\n",log(x));//prints logarithm of number to the base of e
          }
          else{
            puts("Invalid operation");
          }
          break;
        case 'E':
        case 'e':
          printf("%f\n",exp(x));
          break;
        case 'C':
        case 'c':
          printf("%f\n",ceil(x)); 
          break;
        case 'F':
        case 'f':
          printf("%f\n",floor(x));
          break;
        default:
          puts("Invalid input.");
      }
}

char option(){//returns valid user selected options
  puts("Choose an option (B,U,A,V,E)");
  char c;
  scanf(" %c",&c);//get the option from the user

  switch(c){
    case 'B':
    case 'U':
    case 'V':
    case 'A':
    case 'E':
    return c;
    break;
    default:
    puts("Invalid input");
    option();
  }
}

bool clear(){
  return false;
}

int main(void) {
  printf("Welcome to my Command-Line Calculator (CLC)\nDeveloper: Samarveer Manku\nVersion: 1\nDate: 07/11/2022\n--------------------------------------------\nSelect one of the following items:\nB) - Binary Mathematical Operations, such as addition and subtraction.\nU) - Unary Mathematical Operations, such as square root, and log.\nA) - Advances Mathematical Operations, using variables, arrays.\nV) â€“ Define variables and assign them values.\nE) - Exit\n");
  
  float vari[5]={0};//our array of variable values
  bool on=true;
  
  while(on){
    char item=option();

    if(item=='B' || item=='b'){//checks if "B" was selected
      char op;//operation specified by user
      float x,y;//numbers specified by user
      puts("Enter a number:");
      scanf("%f",&x);
      puts("Enter an operation (+,-,*,/,P,X,I,%)");
      scanf(" %c",&op);
      puts("Enter another number:");
      scanf("%f",&y);
      binary(x,y,op);
    }

    else if(item=='U' || item=='u'){//checks if U was selected
      char op;//operation specified by user
      float x;//number specified by user
      puts("Enter a number:");
      scanf("%f",&x);
      puts("Enter an operation (S,L,E,C,F)");
      scanf(" %c",&op);
      unary(x,op); 
    }

    else if(item=='V' || item=='v'){//checks if V was selected
      char v;//correct variable from user
      float n;//number from user
      printf("Pick a variable from a to e\n");
      scanf(" %c",&v);
      printf("Enter a number:\n");
      scanf("%f",&n);

      switch(v){//assigns the proper index in the variable array to the number the user specifies
        case 'a':
        vari[0]=n;
        break;
        case 'b':
        vari[1]=n;
        break;
        case 'c':
        vari[2]=n;
        break;
        case 'd':
        vari[3]=n;
        break;
        case 'e':
        vari[4]=n;
        break;
        default:
        puts("Invaild input");
        break;
      }
    }

    else if(item=='A' || item=='a'){//checks if A was selected
      while(true){
        char i,v,v2;
        float x,y;//used to store the value of the variables
        bool valid=true;//used to check for invalid inputs
        printf("Choose an option (B,U,E)\n");
        scanf(" %c",&i);//gets the user's desired set of operations
  
        if(i=='B' || item=='b'){
          puts("Enter two variables");
          scanf(" %c",&v);
          scanf(" %c",&v2);//the two variables the user specifies

          if(v=='a' || v=='A'){
            x=vari[0];
          }
          else if(v=='b' || v=='B'){
            x=vari[1];
          }
          else if(v=='c' || v=='C'){
            x=vari[2];
          }
          else if(v=='d' || v=='D'){
            x=vari[3];
          }
          else if(v=='e' || v=='E'){
            x=vari[4];
          }
          else{
            puts("Invalid input");
            valid=false;
          }
          if(v2=='a' || v2=='A'){
            y=vari[0];
          }
          else if(v2=='b' || v2=='B'){
            y=vari[1];
          }
          else if(v2=='c' || v2=='C'){
            y=vari[2];
          }
          else if(v2=='d' || v2=='D'){
            y=vari[3];
          }
          else if(v2=='e' || v2=='E'){
            y=vari[4];
          }
          else{
            puts("Invalid input");
            valid=false;
          }//assigns the specified variable values to x&y only if they are valid variables
          
          if(valid){
            vb(x,y);
          }
        }
        else if(i=='U' || i=='u'){
          puts("Enter a variable");
          scanf(" %c",&v);//variable the user specifies

          if(v=='a' || v=='A'){
            x=vari[0];
          }
          else if(v=='b' || v=='B'){
            x=vari[1];
          }
          else if(v=='c' || v=='C'){
            x=vari[2];
          }
          else if(v=='d' || v=='D'){
            x=vari[3];
          }
          else if(v=='e' || v=='E'){
            x=vari[4];
          }
          else{
            puts("Invalid input");
            valid=false;
          }//assigns the specified variable value to x only if it is a valid variable
          
          if(valid){
            vu(x);
          }
        }
        else if(i=='E' || i=='e'){
          break;//takes user out of 'A' operation options if 'E' is selected
        }
      }
    }
      
    else if(item=='E' || item=='e'){
      on=clear();//ends loop if "E" is chosen
    }
  }
}
